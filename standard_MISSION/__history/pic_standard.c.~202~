#include "user_setup.h"

//#use RS232(stream = MAIN_STREAM, baud = 9600, bits = 8, UART1)
#use RS232(stream = MAIN_STREAM, baud = 9600, bits = 8, xmit = PIN_C2, rcv = PIN_C1)

#define INTERRUPT_MAIN_PIN  PIN_B5

#define DATA_SIZE_MAX 1

/*PIN DEFINE*/
#define MCP3204_CS PIN_D7

int8 get_data[DATA_SIZE_MAX] = {};

void send_MAIN();
void data_print(char* data_name, int8* data, int8 data_size);

#INT_EXT
void from_MAIN() {
   disp("Interrupt << MAIN\r\n");
   for (int8 i = 0; i < DATA_SIZE_MAX; ) {
      if (kbhit(MAIN_STREAM)) {
         get_data[i] = fgetc(MAIN_STREAM);
         disp(get_data[i]);
         i++;
      }
   }
   data_print((char*)"get_data from MAIN:", get_data, DATA_SIZE_MAX);
}

int16 read_MCP3204(int8 channel){
    int16 value = 0;
    int8 address = 0b00001100; // Start bit, Single End mode, channnel
    address |= (channel >> 1); // shift "channel" 1bit to right, add to address
    
    output_low(MCP3204_CS); // CS LOW
    delay_us(1);
    spi_write(address); //command send
    value = spi_read(); //receive the first 8bit
    value <<= 8;
    value |= spi_read(); //receive the last 8bit
    output_high(MCP3204_CS); // CS HIGH
    
    return value;
}


int main(void) {

   delay_ms(2000);
   
   /*INITIAL DISPLAY*/
   disp("fliename: %s\r\n", __FILENAME__);
   disp("compiled: %s %s\r\n", __DATE__, __TIME__);
   disp("\r\nMISSION CONTROL START\r\n");
   
   /*SPI SETTING*/
   setup_adc_ports(AN0); //AN0 to ANALOG INPUT
   setup_adc(ADC_CLOCK_INTERNAL); //using internal clock
   setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_CLK_DIV_4 | SPI_MODE_00 | SPI_SS_DISABLED) //SPI setting

   /*INTERRUPTS SETTING*/
   enable_interrupts(INT_EXT);
   enable_interrupts(global);
  
   /*SEQENCE*/
   delay_ms(1);
   while (TRUE) {
      //send_MAIN();
      int16 value = read_MCP3204(0); //DATA receive from AN0
      disp("AN0 Value: %ld\n", value); 
            
      delay_ms(2000);
   }
    
   disp("program end\r\n");
    
   return 0;
}

void send_MAIN() {
   static int8 data = 0;
   output_high(INTERRUPT_MAIN_PIN);
   delay_us(8);
   for (int8 i = 0; i < DATA_SIZE_MAX; i++) {
      fputc(data, MAIN_STREAM);
      data++;
   }
   output_low(INTERRUPT_MAIN_PIN);
    
   disp("%u bytes sent to MAIN\r\n", i);
}

void data_print(char* data_name, int8* data, int8 data_size) {
   disp("%s", data_name);
   for (int i = 0; i < data_size; i++) {
      if (!(i % 16)) {
         disp("\r\n");
      }
      disp(" %3u", data[i]);
   }
   disp("\r\n");
}


